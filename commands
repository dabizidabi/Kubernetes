minikube version #shiw ver minikube
minikube start #create and run VM with k8s (default parameters)
minikube stop 
minikube delete
minikube ssh

minikube start --cpus=4 --memory=8gb --disk0size=5gb
minikube start --cpus=4 --memory=6000mb --disk-size=1500mb
minikube start -p TESTCLUSTER #create and run with name

kubectl version
kubectl version --client
kubectl get componentstatuses
kubectl cluster-info
kubectl get nodes
kubectl label node node2 node-role.kubernetes.io/worker=

kubectl get pods
kubectl get pods -o wide
ubectl get pods -n kube-system -o wide #watch more statu information
kubectl run test-pod --image=dabizidabi/app:v1 --port=80
kubectl describe pods test-pod
kubectl exec -it test-pod /bin/bash
kubectl logs test-pod
kubectl port-forward test-pod 1234:80 #forward ports interactive

kubectl apply -f pod.yml

kubectl get replicationcontroller #old term
kubectl get replicaset
kubectl describe replicaset myapp-replica #show more about replicaset
kubectl delete replicaset myapp-replicaset #also delet all underlying PODs
kubectl replace -f replica.yml
kubectl scale -replicas=6 -f replica.yml

kubectl edit replicaset myapp-replica #edit configuration replicaset directly

kubectl get deployments
kubectl descrive deployment myapp-deploy
kubectl get all
kubectl create -f deploy.yml --record
kubectl rollout history deploy/myapp
kubectl rollout status deploy/myap
kubectl rollout undo deploy/myap

kubectl create -f service.yml
kubectl get services

kubectl get pods,svc
kubectl get pod webapp -o yaml > my-new-pod.yaml #save pod config in file

kubectl create namespace dev
kubeclt get pods --all-namespaces #
kubectl get pods --namespace=kube-system # kubectl -n kube-system get pods

----------------------------------------------------Some interatives commands----------------------------------------------------
kubectl expose pod redis --port=6379 --name redis-service #Create a service redis-service
kubectl create deployment webapp --image=kodekloud/webapp-color ##Create a service redis-service
kubectl scale deployment/webapp --replicas=3 #scale the webapp to 3
kubectl run custom-nginx --image=nginx --port=8080 #create a new pod called custom-nginx using the nginx image and expose it on container port 8080
kubectl create ns dev-ns #Create a new namespace dev-ns
kubectl create deployment redis-deploy --image redis --namespace=dev-ns --dry-run=client -o yaml > deploy.yaml  #Create the deployment YAML file

kubectl get pods --selector env=dev #filter the output
kubectl get all --selector env=prod,bu=finance,tier=frontend #filter the output

----------------------------------------------------Taints and tolerations----------------------------------------------------
kubectl describe nodes node01 | grep -i taint #taint node
kubectl taint nodes node01 spray=mortein:NoSchedule #taint node01 with key of 'spray', value of 'mortein' and effect of 'NoSchedule'

----------------------------------------------------Labels & Affinity----------------------------------------------------
kubeclt get nodes node01 --show-labels
kubectl label node node01 color=blue

---------------------------------------------------Deamon Sets---------------------------------------------------
kubectl get daemonsets --all-namespaces
kubectl get all --all-namespaces
kubectl describe daemonset kube-flannel-ds-amd64 --namespace=kube-system

-------------------------------------------------- Logs ---------------------------------------------------
kubectl logs -f name-of-pods

--------------------------------------------------Config MAP---------------------------------------------------
kubectl get configmaps
kubectl describe configmaps db-config
kubectl create configmap webapp-color --from-literal=APP_COLOR=darkblue

-------------------------------------------------- Secrets ---------------------------------------------------
kubectl create secret generic app-secret --from-literal=DB_HOST=mysql \
					 --from-literal=DB_User=root  \
  					 --from-literal=DB_Passw0rd=passwd

kubectl get secrets
kubectl describe secrets
echo -n 'passwd' | base64 #decode passwd
echo -n 'sdfsHfHf' | base64 --decode
